{
  "version": 3,
  "sources": ["../src/plugin.ts", "../src/settings.ts", "../src/resnap/index.ts"],
  "sourcesContent": ["import { MarkdownView, Notice, Plugin } from \"obsidian\";\nimport { tmpdir } from \"os\";\nimport * as path from \"path\";\nimport * as fs from \"fs/promises\";\nimport SettingsTab, {\n  DEFAULT_SETTINGS,\n  type MyPluginSettings,\n} from \"./settings\";\nimport callReSnap from \"./resnap/index.ts\";\n\nexport default class MyPlugin extends Plugin {\n  settings: MyPluginSettings = DEFAULT_SETTINGS;\n\n  onload = async () => {\n    await this.loadSettings();\n    const plugin = this;\n\n    this.addCommand({\n      id: \"insert-remarkable-drawing-cropped\",\n      name: \"Insert a cropped drawing from the reMarkable\",\n      callback: () => {\n        plugin.tryInsertingDrawing(true);\n      },\n    });\n\n    this.addCommand({\n      id: \"insert-remarkable-drawing-no-crop\",\n      name: \"Insert an uncropped drawing from the reMarkable\",\n      callback: () => {\n        plugin.tryInsertingDrawing(false);\n      },\n    });\n\n    this.addSettingTab(new SettingsTab(this.app, this));\n  };\n\n  loadSettings = async () => {\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n  };\n\n  saveSettings = async () => {\n    await this.saveData(this.settings);\n  };\n\n  tryInsertingDrawing = async (crop: boolean): Promise<void> => {\n    new Notice(\"Inserting rM drawing...\", 1000);\n\n    try {\n      const fileName = `${crypto.randomUUID()}.png`;\n      const outputFilePath = path.join(tmpdir(), fileName);\n      const { noteMetadata, notePath } = await callReSnap({\n        rmAddress: this.settings.rmAddress,\n        reSnapPath: this.settings.reSnapPath,\n        reSnapSshkey: this.settings.rmSshKeyAddress,\n        reSnapExtraArgs: this.settings.reSnapExtraArgs,\n        outputPath: outputFilePath,\n        postProcess: this.settings.postprocessor,\n        postProcessExtraArgs: crop ? [\"--crop\"] : [],\n      });\n\n      // Get the vault's root path\n      const resourceRoot = this.app.vault.getFolderByPath(\n        this.settings.outputPath,\n      );\n      if (resourceRoot === null)\n        throw new Error(\"Could not find the resource root!\");\n      console.log(\"Resource root:\", resourceRoot);\n\n      // Copy the image to the vault if it's not already there\n      const vaultImagePath = path.join(resourceRoot.path, fileName);\n      console.log(\"Copying drawing to vault:\", vaultImagePath);\n      //@ts-ignore\n      const vaultBasePath = await this.app.vault.adapter.basePath;\n      console.log(vaultBasePath);\n      const vaultResourceDumpPath = path.join(vaultBasePath, vaultImagePath);\n      await fs.copyFile(outputFilePath, vaultResourceDumpPath);\n\n      fs.unlink(outputFilePath)\n        .then(() => console.log(\"Deleted temporary file:\", outputFilePath))\n        .catch((error) =>\n          console.error(\"Could not delete temporary file:\", error),\n        );\n\n      // Create the markdown for the image\n      let imageMarkdown =\n        `![[${fileName}]]\\n` +\n        `\\`Page ${noteMetadata.lastOpenedPage + 1} @ \"${notePath}\"\\``;\n      if (this.settings.imageTag != \"\")\n        imageMarkdown += ` #${this.settings.imageTag}`;\n\n      // Insert the image into the document\n      const view = this.app.workspace.getActiveViewOfType(MarkdownView);\n      if (view) {\n        const editor = view.editor;\n        const cursor = editor.getCursor();\n        editor.replaceRange(imageMarkdown, cursor);\n      } else throw new Error(\"No markdown view found!\");\n    } catch (error) {\n      new Notice(\n        \"Could not insert your rM drawing! Is your tablet connected \" +\n          \"and reachable at the configured address?\",\n      );\n      throw error;\n    }\n  };\n}\n", "import { type App, PluginSettingTab, Setting } from \"obsidian\";\nimport type MyPlugin from \"./plugin\";\n\nexport interface MyPluginSettings {\n  reSnapPath: string;\n  reSnapExtraArgs: string[];\n  invertRemarkableImages: boolean;\n  outputPath: string;\n  rmAddress: string;\n  rmSshKeyAddress: string;\n  postprocessor: string;\n  imageTag: string;\n}\n\nexport const DEFAULT_SETTINGS: MyPluginSettings = {\n  reSnapPath: \"reSnap\",\n  reSnapExtraArgs: [\"-c\"],\n  invertRemarkableImages: false,\n  outputPath: \"Remarkable\",\n  rmAddress: \"10.11.99.1\",\n  rmSshKeyAddress: \"~/.ssh/remarkable\",\n  postprocessor: \"\",\n  imageTag: \"remarkable\",\n};\n\nexport default class SettingsTab extends PluginSettingTab {\n  plugin: MyPlugin;\n\n  constructor(app: App, plugin: MyPlugin) {\n    super(app, plugin);\n    this.plugin = plugin;\n  }\n\n  display = (): void => {\n    let { containerEl } = this;\n\n    containerEl.empty();\n    containerEl.createEl(\"h2\", { text: \"Obsidian & reMarkable\" });\n\n    new Setting(containerEl)\n      .setName(\"reMarkable IP\")\n      .setDesc(\n        \"The IP address of your reMarkable. Use 10.11.99.1 and connect via cable if unsure.\",\n      )\n      .addText((text) =>\n        text\n          .setPlaceholder(\"Example: 10.11.99.1\")\n          .setValue(this.plugin.settings.rmAddress)\n          .onChange(async (value) => {\n            this.plugin.settings.rmAddress = value;\n            await this.plugin.saveSettings();\n          }),\n      );\n\n    new Setting(containerEl)\n      .setName(\"SSH key\")\n      .setDesc(\"The private ssh key for authing into the remarkable\")\n      .addText((text) =>\n        text\n          .setPlaceholder(\"/home/name/.ssh/something\")\n          .setValue(this.plugin.settings.rmSshKeyAddress),\n      );\n\n    new Setting(containerEl)\n      .setName(\"reSnap executable\")\n      .setDesc(\"The path to the reSnap executable if it's not in $PATH\")\n      .addText((text) =>\n        text\n          .setPlaceholder(\"reSnap path if not in $PATH\")\n          .setValue(this.plugin.settings.reSnapPath)\n          .onChange(async (value) => {\n            this.plugin.settings.reSnapPath = value;\n            await this.plugin.saveSettings();\n          }),\n      );\n\n    new Setting(containerEl)\n      .setName(\"reSnap extra arguments\")\n      .setDesc(\"Extra arguments to pass to reSnap\")\n      .addText((text) =>\n        text\n          .setPlaceholder(\"Extra arguments\")\n          .setValue(this.plugin.settings.reSnapExtraArgs.join(\" \"))\n          .onChange(async (value) => {\n            this.plugin.settings.reSnapExtraArgs = value.split(\" \");\n            await this.plugin.saveSettings();\n          }),\n      );\n\n    new Setting(containerEl)\n      .setName(\"Output folder\")\n      .setDesc(\"The folder where rM drawing images should be stored\")\n      .addText((text) =>\n        text\n          .setPlaceholder(\"Folder in vault\")\n          .setValue(this.plugin.settings.outputPath),\n      );\n\n    new Setting(containerEl)\n      .setName(\"Postprocessing executable\")\n      .setDesc(\n        \"The absolute path to an executable that post-processes the captured image. \" +\n          \"The script will be passed the filename and should overwrite the file with a modified version.\",\n      )\n      .addText((text) =>\n        text\n          .setPlaceholder(\"Path or executable name\")\n          .setValue(this.plugin.settings.postprocessor)\n          .onChange(async (value) => {\n            this.plugin.settings.postprocessor = value;\n            await this.plugin.saveSettings();\n          }),\n      );\n\n    new Setting(containerEl)\n      .setName(\"Image tag\")\n      .setDesc(\"The tag to use for images inserted from the reMarkable. \")\n      .addText((text) =>\n        text\n          .setPlaceholder(\"remarkable\")\n          .setValue(this.plugin.settings.imageTag)\n          .onChange(async (value) => {\n            this.plugin.settings.imageTag = value;\n            await this.plugin.saveSettings();\n          }),\n      );\n  };\n}\n", "import { execFile as execFileCallback } from \"child_process\";\nimport { promisify } from \"util\";\n\ninterface DocumentMetadata {\n  createdTime: string;\n  lastModified: string;\n  lastOpened: string;\n  lastOpenedPage: number;\n  parent: string;\n  pinned: boolean;\n  type: string;\n  visibleName: string;\n}\n\ninterface CallResnapArgs {\n  rmAddress: string;\n  reSnapPath: string;\n  reSnapSshkey: string;\n  reSnapExtraArgs?: string[];\n  outputPath: string;\n  postProcess: string;\n  postProcessExtraArgs?: string[];\n}\n\nconst execFile = promisify(execFileCallback);\n\nasync function getNoteFileMetadataJson(\n  noteFileMetadataPath: string,\n  { rmAddress, reSnapSshkey }: CallResnapArgs,\n) {\n  return JSON.parse(\n    (\n      await execFile(\"ssh\", [\n        `root@${rmAddress}`,\n        \"-i\",\n        reSnapSshkey,\n        `cat '/home/root/.local/share/remarkable/xochitl/${noteFileMetadataPath}.metadata'`,\n      ])\n    ).stdout,\n  ) as DocumentMetadata;\n}\n\nasync function getCurrentNotePath(\n  reSnapOutput: string,\n  args: CallResnapArgs,\n): Promise<string> {\n  const noteFileMetadataJson = await getNoteFileMetadataJson(\n    reSnapOutput,\n    args,\n  );\n\n  const getNoteFilePath = async (\n    noteFileMetadataJson: DocumentMetadata,\n    noteFilePath: string,\n  ) => {\n    if (noteFileMetadataJson.parent !== \"\")\n      return getNoteFilePath(\n        await getNoteFileMetadataJson(noteFileMetadataJson.parent, args),\n        `${noteFileMetadataJson.visibleName}/${noteFilePath}`,\n      );\n    else return noteFilePath;\n  };\n  const currentNotePath = await getNoteFilePath(\n    noteFileMetadataJson,\n    noteFileMetadataJson.visibleName,\n  );\n\n  return currentNotePath.replace(/\\/[^/]*$/, \"\");\n}\n\nexport default async function callReSnap(args: {\n  rmAddress: string;\n  reSnapPath: string;\n  reSnapSshkey: string;\n  reSnapExtraArgs: string[];\n  outputPath: string;\n  postProcess: string;\n  postProcessExtraArgs?: string[];\n}) {\n  const reSnapOutput = (\n    await execFile(args.reSnapPath, [\n      \"-k\",\n      args.reSnapSshkey,\n      \"-n\",\n      \"-s\",\n      args.rmAddress,\n      \"-o\",\n      args.outputPath,\n      ...args.reSnapExtraArgs,\n    ])\n  ).stdout.replace(\"\\n\", \"\");\n\n  if (args.postProcess.length > 0) {\n    const postProcessOutput = await execFile(args.postProcess, [\n      args.outputPath,\n      ...(args.postProcessExtraArgs || []),\n    ]);\n    console.log(\"Postprocess output:\", postProcessOutput.stdout);\n    if (postProcessOutput.stderr)\n      console.error(\"Postprocess stderr:\", postProcessOutput.stderr);\n  }\n\n  return {\n    notePath: await getCurrentNotePath(reSnapOutput, args),\n    noteMetadata: await getNoteFileMetadataJson(reSnapOutput, args),\n  };\n}\n"],
  "mappings": "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",
  "names": ["import_obsidian", "execFileCallback", "noteFileMetadataJson"]
}
